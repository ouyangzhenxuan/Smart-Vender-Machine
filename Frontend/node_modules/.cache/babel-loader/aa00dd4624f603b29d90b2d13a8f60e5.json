{"ast":null,"code":"// Copyright 2013 The Obvious Corporation.\n\n/**\n * @fileoverview Helpers made available via require('phantomjs') once package is\n * installed.\n */\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar spawn = require('child_process').spawn;\n\nvar Promise = require('es6-promise').Promise;\n/**\n * Where the phantom binary can be found.\n * @type {string}\n */\n\n\ntry {\n  var location = require('./location');\n\n  exports.path = path.resolve(__dirname, location.location);\n  exports.platform = location.platform;\n  exports.arch = location.arch;\n} catch (e) {\n  // Must be running inside install script.\n  exports.path = null;\n}\n/**\n * The version of phantomjs installed by this package.\n * @type {number}\n */\n\n\nexports.version = '2.1.1';\n/**\n * Returns a clean path that helps avoid `which` finding bin files installed\n * by NPM for this repo.\n * @param {string} path\n * @return {string}\n */\n\nexports.cleanPath = function (path) {\n  return path.replace(/:[^:]*node_modules[^:]*/g, '').replace(/(^|:)\\.\\/bin(\\:|$)/g, ':').replace(/^:+/, '').replace(/:+$/, '');\n}; // Make sure the binary is executable.  For some reason doing this inside\n// install does not work correctly, likely due to some NPM step.\n\n\nif (exports.path) {\n  try {\n    // avoid touching the binary if it's already got the correct permissions\n    var st = fs.statSync(exports.path);\n    var mode = st.mode | parseInt('0555', 8);\n\n    if (mode !== st.mode) {\n      fs.chmodSync(exports.path, mode);\n    }\n  } catch (e) {// Just ignore error if we don't have permission.\n    // We did our best. Likely because phantomjs was already installed.\n  }\n}\n/**\n * Executes a script or just runs PhantomJS\n */\n\n\nexports.exec = function () {\n  var args = Array.prototype.slice.call(arguments);\n  return spawn(exports.path, args);\n};\n/**\n * Runs PhantomJS with provided options\n * @example\n * // handy with WebDriver\n * phantomjs.run('--webdriver=4444').then(program => {\n *   // do something\n *   program.kill()\n * })\n * @returns {Promise} the process of PhantomJS\n */\n\n\nexports.run = function () {\n  var args = arguments;\n  return new Promise(function (resolve, reject) {\n    try {\n      var program = exports.exec.apply(null, args);\n      var isFirst = true;\n      var stderr = '';\n      program.stdout.on('data', function () {\n        // This detects PhantomJS instance get ready.\n        if (!isFirst) return;\n        isFirst = false;\n        resolve(program);\n      });\n      program.stderr.on('data', function (data) {\n        stderr = stderr + data.toString('utf8');\n      });\n      program.on('error', function (err) {\n        if (!isFirst) return;\n        isFirst = false;\n        reject(err);\n      });\n      program.on('exit', function (code) {\n        if (!isFirst) return;\n        isFirst = false;\n\n        if (code == 0) {\n          // PhantomJS doesn't use exit codes correctly :(\n          if (stderr.indexOf('Error:') == 0) {\n            reject(new Error(stderr));\n          } else {\n            resolve(program);\n          }\n        } else {\n          reject(new Error('Exit code: ' + code));\n        }\n      });\n    } catch (err) {\n      reject(err);\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}