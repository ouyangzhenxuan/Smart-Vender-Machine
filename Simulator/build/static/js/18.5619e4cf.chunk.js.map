{"version":3,"sources":["pages/Simulator.js","components/Typography.js","components/Page.js","utils/propTypes.js","utils/bemnames.js"],"names":["Simulator","props","dateChangeHandler","event","date","target","value","list","split","setState","year","month","day","console","log","state","onSubmitId","allvm","axios","post","email","then","response","data","vm_id_array","Object","keys","emailChangeHandler","name","itemChangeHandler","unit_price","vm_id","item","total_price","amount","amountChangeHandler","restock_total_price","restock_price","vmidChangeHandler","product_list","item_array","i","length","push","id","itemArray","restockPriceChangeHandler","restockTotalPriceChangeHandler","confirmPurchase","alert","confirmRestock","price","title","md","placeholder","margin","fullWidth","onChange","this","fullwidth","variant","color","onClick","labelId","map","row","index","key","label","InputProps","readOnly","type","for","React","Component","tagMap","h1","h2","h3","h4","h5","h6","p","lead","blockquote","Typography","TypoComp","Tag","tag","className","restProps","classes","classNames","defaultProps","bem","bn","create","Page","breadcrumbs","children","b","e","active","PropTypes","ID","oneOfType","string","number","isRequired","component","func","instanceOf","Date","namespace","bemNames","blockName","block","more","m"],"mappings":"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","file":"static/js/18.5619e4cf.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport color from '@material-ui/core/colors/amber';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\n// import DatePicker from \"react-datepicker\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Label,\r\n  Input,\r\n  Button,\r\n  Form,\r\n  FormGroup,\r\n  FormText,\r\n  UncontrolledButtonDropdown,\r\n  DropdownToggle,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n} from 'reactstrap';\r\n\r\nimport Page from 'components/Page';\r\n\r\n// var email = 'jinxund@smu.edu'\r\n// var vm_id = 46\r\n\r\nclass Simulator extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // item: '',\r\n      // amount: 1,\r\n      // price: 1.5,\r\n      // email: 'jinxund@smu.edu',\r\n      // id: 1,\r\n      // amount: 10,\r\n      // date: Date.now(),\r\n\r\n      item: '',\r\n      amount: 1,\r\n      unit_price: 0,\r\n      vm_id: 1,\r\n      // yuc@smu.edu\r\n      email: 'yuc@smu.edu',\r\n      total_price: 0,\r\n      restock_price: 1,\r\n      restock_total_price: 0,\r\n\r\n      vm_id_array:[],\r\n\r\n      date: '',\r\n\r\n      year: 2020,\r\n      month: 3,\r\n      day: 1,\r\n\r\n      allvm: '',\r\n\r\n      // orderInfo:{\r\n      //     orderItem: '',\r\n      //     orderAmount: 1,\r\n      //     price: 3,\r\n      // },\r\n\r\n      itemArray: [\r\n          {\r\n              id: 1,\r\n              item: \"Coke-testing\", \r\n              price: 2\r\n          }\r\n      ],\r\n\r\n    }\r\n  }\r\n\r\n  dateChangeHandler = (event) => {\r\n    var date = event.target.value;\r\n    var list = date.split(\"-\");\r\n    this.setState({ \r\n      date: date,\r\n      year: list[0],\r\n      month: list[1],\r\n      day: list[2]\r\n    });\r\n    console.log(this.state);\r\n  }\r\n  onSubmitId = () =>{\r\n    var allvm;\r\n    axios.post('https://vending-insights-smu.firebaseapp.com/vm/getallvm',{\r\n      email: this.state.email\r\n    })\r\n    .then(response=>{\r\n      if(response.data !== null){\r\n        allvm = response.data\r\n      }else{\r\n        console.log('fail to get all vm datas')\r\n      }\r\n    })\r\n    .then(()=>{\r\n      this.setState({\r\n        vm_id_array: Object.keys(allvm),\r\n        allvm: allvm\r\n      })\r\n      \r\n      console.log(allvm)\r\n      console.log(this.state)\r\n    }).then(()=>{\r\n      // var vm_id_list = Object.keys(this.state.allvm)\r\n      // // var \r\n      // this.setState({\r\n\r\n      // })\r\n    })\r\n  }\r\n\r\n  emailChangeHandler = (event) =>{\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  }\r\n\r\n  itemChangeHandler = (event) =>{\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    }, ()=>{\r\n      this.setState({\r\n        unit_price: this.state.allvm[this.state.vm_id]['products'][this.state.item]['price'],\r\n      }, ()=>{\r\n        this.setState({\r\n          total_price: this.state.amount * this.state.unit_price\r\n        })\r\n      })\r\n    });\r\n  }\r\n\r\n  amountChangeHandler = (event) =>{\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    }, ()=>{\r\n      this.setState({\r\n        total_price: this.state.amount * this.state.unit_price,\r\n        restock_total_price: this.state.amount * this.state.restock_price\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \r\n   * we need a json to store\r\n   * {\r\n   *  item: 'Coke',\r\n   *  price: 3,\r\n   * }\r\n   * \r\n   * */ \r\n  vmidChangeHandler = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    }, ()=>{\r\n      // when vm_id change, the product list also change\r\n      var product_list = Object.keys(this.state.allvm[event.target.value]['products']);\r\n      var item_array = [];\r\n      for(var i=0; i<product_list.length; i++){\r\n        item_array.push({\r\n          id: product_list[i],\r\n          item: product_list[i],\r\n          unit_price: this.state.allvm[event.target.value]['products'][product_list[i]]['price'],\r\n        })\r\n      }\r\n      this.setState({\r\n        itemArray: item_array\r\n      })\r\n    });\r\n  }\r\n\r\n  restockPriceChangeHandler = (event) =>{\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    }, ()=>{\r\n      this.setState({\r\n        restock_total_price: this.state.amount * this.state.restock_price\r\n      })\r\n    });\r\n    \r\n    console.log(this.state.restock_price);\r\n  }\r\n\r\n  restockTotalPriceChangeHandler = (event) =>{\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n    console.log(this.state.restock_total_price);\r\n  }\r\n\r\n\r\n  confirmPurchase = () => {\r\n    console.log(this.state.item)\r\n    console.log(this.state.amount)\r\n\r\n    axios.post('https://vending-insights-smu.firebaseapp.com/vm/updatetransaction', this.state)\r\n      .then(response => {\r\n        if (response.data === 'update success') {\r\n          alert('purchase done!')\r\n        } else {\r\n          alert('fail to purchase!')\r\n        }\r\n      });\r\n    \r\n  }\r\n  \r\n  confirmRestock = () => {\r\n    console.log(this.state.item)\r\n    console.log(this.state.amount)\r\n\r\n    axios.post('https://vending-insights-smu.firebaseapp.com/vm/getstock', this.state)\r\n      .then(response => {\r\n        if (response.data === 'restock success') {\r\n          alert('restock success!');\r\n        } else {\r\n          alert('restock fail!');\r\n        }\r\n      });\r\n\r\n    // axios.post('https://vending-insights-smu.firebaseapp.com/vm/updatetransaction', this.state)\r\n    //   .then(response => {\r\n    //     if (response.data == 'update success') {\r\n    //       alert('purchase done!')\r\n    //     } else {\r\n    //       alert('fail to purchase!')\r\n    //     }\r\n    //   });\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n      <Page title=\"Simulator\">\r\n        {/* <Row>\r\n          <Col sm=\"12\" md={{ size: 6, offset: 3 }}>hello</Col>\r\n        </Row> */}\r\n        <Row>\r\n          <Col md={12}>\r\n            <Card>\r\n              <CardHeader>Email</CardHeader>\r\n              <CardBody>\r\n                <TextField\r\n                  id=\"half-width-text-field\"\r\n                  placeholder='xxx@smu.edu'\r\n                  margin=\"normal\"\r\n                  fullWidth\r\n                  name='email'\r\n                  // value='yuc@smu.edu'\r\n                  onChange={this.emailChangeHandler}\r\n                  \r\n                />\r\n                <Button\r\n                  fullwidth=\"true\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={this.onSubmitId}\r\n                >\r\n                  submit\r\n              </Button>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col md={12}>\r\n            <Card>\r\n              <CardHeader>Vending Machine ID</CardHeader>\r\n              <CardBody>\r\n                <FormControl>\r\n                  <InputLabel id=\"demo-simple-select-label\">id</InputLabel>\r\n                  <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    name='vm_id'\r\n                    value={this.state.vm_id}\r\n                    onChange={this.vmidChangeHandler}>\r\n                    {/* <MenuItem value={'1'}>id</MenuItem> */}\r\n                    {\r\n                      this.state.vm_id_array.map((row, index)=>{\r\n                      return(\r\n                        <MenuItem key={row} value={row}>{row}</MenuItem>\r\n                        )\r\n                      })\r\n                    }\r\n                  </Select>\r\n                </FormControl>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col md={12}>\r\n            <Card>\r\n              <CardHeader>Vending Machine Item</CardHeader>\r\n              <CardBody>\r\n                <FormControl>\r\n                  <InputLabel id=\"demo-simple-select-label\">Item</InputLabel>\r\n                  <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    onChange={this.itemChangeHandler}\r\n                    value={this.state.item}\r\n                    name='item'>\r\n                    {\r\n                      this.state.itemArray.map((row, index)=>{\r\n                      return(\r\n                        <MenuItem key={row.id} value={row.item}>{row.item}</MenuItem>\r\n                        )\r\n                      })\r\n                    }\r\n                    \r\n                  </Select>\r\n                  <TextField \r\n                    id=\"standard-required-1\" \r\n                    label=\"unit_price\" \r\n                    value={this.state.unit_price}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                    variant=\"filled\"\r\n                    />\r\n                  \r\n                  <TextField \r\n                    id=\"standard-required-2\" \r\n                    label=\"restock_price\" \r\n                    name=\"restock_price\"\r\n                    type=\"number\"\r\n                    onChange={this.restockPriceChangeHandler}\r\n                    // variant=\"filled\"\r\n                    />\r\n                </FormControl>\r\n                \r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col md={12}>\r\n            <Card>\r\n              <CardHeader>Product Amount</CardHeader>\r\n              <CardBody>\r\n                <TextField\r\n                  // id=\"half-width-text-field\"\r\n                  placeholder={''+this.state.amount}\r\n                  margin=\"normal\"\r\n                  name=\"amount\"\r\n                  value={this.state.amount}\r\n                  onChange={this.amountChangeHandler}\r\n                  \r\n                  type=\"number\"\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col md={12}>\r\n            <Card>\r\n              <CardHeader>Total price</CardHeader>\r\n              <CardBody>\r\n                <TextField \r\n                    id=\"standard-required-2\" \r\n                    label=\"total_price\"\r\n                    value={this.state.total_price}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                    variant=\"filled\"\r\n                />\r\n                \r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col md={12}>\r\n            <Card>\r\n              <CardHeader>Restock Total price</CardHeader>\r\n              <CardBody>\r\n                <TextField \r\n                    id=\"standard-required-2\" \r\n                    label=\"restock_total_price\"\r\n                    value={this.state.restock_total_price}\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                    }}\r\n                    variant=\"filled\"\r\n                />\r\n                \r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row>\r\n          <Col md={12}>\r\n            <Card>\r\n              <CardHeader>Date</CardHeader>\r\n              <CardBody>\r\n                <Form>\r\n                  <FormGroup>\r\n\r\n                    <Label for=\"date\">DateTime</Label>\r\n                    <Input\r\n                      type=\"date\"\r\n                      name=\"date\"\r\n                      id='dt'\r\n                      value={this.state.date}\r\n                      placeholder=\"datetime placeholder\"\r\n                      onChange={this.dateChangeHandler} />\r\n                  </FormGroup>\r\n                </Form>\r\n                <Button\r\n                  fullwidth=\"true\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={this.confirmPurchase}\r\n                >\r\n                  Place Order\r\n                 </Button>\r\n                 <Button\r\n                  fullwidth=\"true\"\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  onClick={this.confirmRestock}\r\n                >\r\n                  Restock\r\n                 </Button>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n\r\n        \r\n\r\n      </Page>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Simulator;\r\n\r\n","import classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nconst tagMap = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  'display-1': 'h1',\n  'display-2': 'h1',\n  'display-3': 'h1',\n  'display-4': 'h1',\n  p: 'p',\n  lead: 'p',\n  blockquote: 'blockquote',\n};\n\nconst types = Object.keys(tagMap);\n// defines general typography\nconst Typography = ({ tag: Tag, className, type, ...restProps }) => {\n  const classes = classNames({ [type]: !!type }, className);\n  let TypoComp;\n\n  if (Tag) {\n    TypoComp = Tag;\n  } else if (!Tag && tagMap[type]) {\n    TypoComp = tagMap[type];\n  } else {\n    TypoComp = 'p';\n  }\n\n  return <TypoComp {...restProps} className={classes} />;\n};\n\nTypography.propTypes = {\n  tag: PropTypes.component,\n  className: PropTypes.string,\n  type: PropTypes.oneOf(types),\n};\n\nTypography.defaultProps = {\n  type: 'p',\n};\n\nexport default Typography;\n","import React from 'react';\nimport PropTypes from 'utils/propTypes';\n\nimport bn from 'utils/bemnames';\n\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\n\nimport Typography from './Typography';\n\nconst bem = bn.create('page');\n\n// page function that defines a general page\nconst Page = ({\n  title,\n  breadcrumbs,\n  tag: Tag,\n  className,\n  children,\n  ...restProps\n}) => {\n  const classes = bem.b('px-3', className);\n\n  return (\n    <Tag className={classes} {...restProps}>\n      <div className={bem.e('header')}>\n        {title && typeof title === 'string' ? (\n          <Typography type=\"h1\" className={bem.e('title')}>\n            {title}\n          </Typography>\n        ) : (\n            title\n          )}\n        {breadcrumbs && (\n          <Breadcrumb className={bem.e('breadcrumb')}>\n            <BreadcrumbItem>Home</BreadcrumbItem>\n            {breadcrumbs.length &&\n              breadcrumbs.map(({ name, active }, index) => (\n                <BreadcrumbItem key={index} active={active}>\n                  {name}\n                </BreadcrumbItem>\n              ))}\n          </Breadcrumb>\n        )}\n      </div>\n      {children}\n    </Tag>\n  );\n};\n\nPage.propTypes = {\n  tag: PropTypes.component,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  className: PropTypes.string,\n  children: PropTypes.node,\n  breadcrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      active: PropTypes.bool,\n    })\n  ),\n};\n\nPage.defaultProps = {\n  tag: 'div',\n  title: '',\n};\n\nexport default Page;\n","import PropTypes from 'prop-types';\n\nexport default {\n  ...PropTypes,\n  ID: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  component: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  date: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.string]),\n};\n","import classNames from 'classnames';\n\n// BEM function\nexport const createBEM = namespace => {\n  return {\n    create: blockName => {\n      let block = blockName;\n\n      if (typeof namespace === 'string') {\n        block = `${namespace}-${blockName}`;\n      }\n\n      return {\n        b: (...more) => {\n          return classNames(block, more);\n        },\n        e: (className, ...more) => {\n          return classNames(`${block}__${className}`, more);\n        },\n        m: (className, ...more) => {\n          return classNames(`${block}--${className}`, more);\n        },\n      };\n    },\n  };\n};\n\nexport const bemNames = createBEM('cr');\n\nexport default bemNames;\n"],"sourceRoot":""}