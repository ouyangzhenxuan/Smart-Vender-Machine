{"version":3,"sources":["components/GAListener.js","components/PageSpinner.js","App.js","index.js"],"names":["hasGAId","process","REACT_APP_GOOGLE_ANALYTICS","ReactGA","initialize","GAListener","this","sendPageView","context","router","history","location","listen","set","page","pathname","pageview","props","children","React","Component","contextTypes","PropTypes","object","PageSpinner","color","className","Spinner","Simulator","lazy","App","basename","split","pop","Suspense","fallback","exact","path","component","to","componentQueries","width","breakpoint","ReactDOM","render","document","getElementById"],"mappings":"iSAKMA,IAAYC,2SAAYC,2BAE1BF,GACFG,IAAQC,WAAWH,2SAAYC,4B,IAI3BG,E,kLAMEL,IACFM,KAAKC,aAAaD,KAAKE,QAAQC,OAAOC,QAAQC,UAC9CL,KAAKE,QAAQC,OAAOC,QAAQE,OAAON,KAAKC,iB,mCAI/BI,GACXR,IAAQU,IAAI,CAAEC,KAAMH,EAASI,WAC7BZ,IAAQa,SAASL,EAASI,Y,+BAI1B,OAAOT,KAAKW,MAAMC,a,GAlBGC,IAAMC,WAAzBf,EACGgB,aAAe,CACpBZ,OAAQa,IAAUC,QAoBPlB,Q,QCRAmB,EArBK,SAAC,GAA2B,IAAD,IAAxBC,aAAwB,MAAhB,UAAgB,EAC7C,OACE,yBAAKC,UAAU,mBACb,kBAACC,EAAA,EAAD,CAASF,MAAOA,M,gCCUhBG,G,MAVYT,IAAMU,MAAK,kBAAM,8EAChBV,IAAMU,MAAK,kBAAM,uEACjBV,IAAMU,MAAK,kBAAM,uEAClBV,IAAMU,MAAK,kBAAM,6EACRV,IAAMU,MAAK,kBAAM,6EAC5BV,IAAMU,MAAK,kBAAM,8EACXV,IAAMU,MAAK,kBAAM,8EACnBV,IAAMU,MAAK,kBAAM,8EACjBV,IAAMU,MAAK,kBAAM,mCACpBV,IAAMU,MAAK,kBAAM,uEAChBV,IAAMU,MAAK,kBAAM,yEAK7BC,E,uKAGF,OACE,kBAAC,IAAD,CAAeC,SAPb,IAAN,OAAW9B,GAAuB+B,MAAM,KAAKC,QAQvC,kBAAC,EAAD,KACE,kBAAC,IAAD,KACG,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,kBAAC,EAAD,OAWvB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,KAIrC,kBAAC,IAAD,CAAUW,GAAG,a,GAtBPpB,IAAMC,WAsDToB,OAxBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OAAIA,EAAQ,IACH,CAAEC,WAAY,MAGnB,IAAMD,GAASA,EAAQ,IAClB,CAAEC,WAAY,MAGnB,IAAMD,GAASA,EAAQ,IAClB,CAAEC,WAAY,MAGnB,IAAMD,GAASA,EAAQ,KAClB,CAAEC,WAAY,MAGnBD,EAAQ,KACH,CAAEC,WAAY,MAGhB,CAAEA,WAAY,QAGRF,CAAwBV,GCxEvCa,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ff277515.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ReactGA from 'react-ga';\n\nconst hasGAId = !!process.env.REACT_APP_GOOGLE_ANALYTICS;\n\nif (hasGAId) {\n  ReactGA.initialize(process.env.REACT_APP_GOOGLE_ANALYTICS);\n}\n\n// GA listener used in APP for react routing\nclass GAListener extends React.Component {\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  componentDidMount() {\n    if (hasGAId) {\n      this.sendPageView(this.context.router.history.location);\n      this.context.router.history.listen(this.sendPageView);\n    }\n  }\n\n  sendPageView(location) {\n    ReactGA.set({ page: location.pathname });\n    ReactGA.pageview(location.pathname);\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nexport default GAListener;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Spinner } from 'reactstrap';\n\n// page spinner function\nconst PageSpinner = ({ color = 'primary' }) => {\n  return (\n    <div className=\"cr-page-spinner\">\n      <Spinner color={color} />\n    </div>\n  );\n};\n\nPageSpinner.propTypes = {\n  color: PropTypes.oneOf([\n    'primary',\n    'secondary',\n    'success',\n    'danger',\n    'warning',\n    'info',\n    'light',\n    'dark',\n  ]),\n};\n\nexport default PageSpinner;\n","import GAListener from 'components/GAListener';\nimport PageSpinner from 'components/PageSpinner';\nimport React from 'react';\nimport componentQueries from 'react-component-queries';\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport './styles/reduction.scss';\n\n// loads all components\nconst LoginPage = React.lazy(() => import('pages/Login'));\nconst SignupPage = React.lazy(() => import('pages/Signup'));\nconst ForGetPage = React.lazy(() => import('pages/ForgetPassword'));\nconst AddVMPage = React.lazy(() => import('pages/AddVM'));\nconst VendingMachinePage = React.lazy(() => import('pages/VendingMachine'));\nconst MapPage = React.lazy(() => import('pages/MapPage'));\nconst DashboardPage = React.lazy(() => import('pages/DashboardPage'));\nconst ProfilePage = React.lazy(() => import('pages/ProfilePage'));\nconst LandingPage = React.lazy(() => import('../src/Landing Pge/LandingPage'));\nconst HelpPage = React.lazy(() => import('pages/Help'));\nconst Simulator = React.lazy(() => import('pages/Simulator'));\nconst getBasename = () => {\n  return `/${process.env.PUBLIC_URL.split('/').pop()}`;\n};\n\nclass App extends React.Component {\n  // defines all routes\n  render() {\n    return (\n      <BrowserRouter basename={getBasename()}>\n        <GAListener>\n          <Switch>\n             <React.Suspense fallback={<PageSpinner />}>\n                {/* <Route exact path=\"/\" component={LoginPage} />\n                <Route exact path=\"/signup\" component={SignupPage} />\n                <Route exact path=\"/check_email\" component={ForGetPage} />\n            <Route exact path=\"/n\" component = {LandingPage} />\n                <Route exact path=\"/dashboard\" component={DashboardPage} />\n                <Route exact path=\"/addvm\" component={AddVMPage} />\n                <Route exact path=\"/map\" component={MapPage} />\n                <Route exact path=\"/vendingmachine\" component={VendingMachinePage} />\n                <Route exact path=\"/help\" component={HelpPage} />\n                <Route exact path=\"/profile\" component={ProfilePage} /> */}\n                <Route exact path=\"/\" component={Simulator} />\n              \n            {/* </MainLayout> */}\n            </React.Suspense>\n            <Redirect to=\"/\" />\n          </Switch>\n        </GAListener>\n      </BrowserRouter>\n    );\n  }\n}\n\nconst query = ({ width }) => {\n  if (width < 575) {\n    return { breakpoint: 'xs' };\n  }\n\n  if (576 < width && width < 767) {\n    return { breakpoint: 'sm' };\n  }\n\n  if (768 < width && width < 991) {\n    return { breakpoint: 'md' };\n  }\n\n  if (992 < width && width < 1199) {\n    return { breakpoint: 'lg' };\n  }\n\n  if (width > 1200) {\n    return { breakpoint: 'xl' };\n  }\n\n  return { breakpoint: 'xs' };\n};\n\nexport default componentQueries(query)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}